{
	"info": {
		"_postman_id": "e8e4311f-8e17-4cc0-9902-465480772463",
		"name": "Grocery Tracker API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"res = pm.response.json();",
							"console.log(res);",
							"tests['should have pong field'] = res.pong;",
							""
						],
						"id": "eb652968-c01f-4217-b277-fa18d92902b9"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{apiUrl}}/ping",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "CORS Options",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							""
						],
						"id": "29106580-44e4-42d3-9709-8e7ae919c942"
					}
				}
			],
			"request": {
				"method": "OPTIONS",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{apiUrl}}/anything/really",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"anything",
						"really"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6858520c-194b-4c51-a43a-cd05fd91bf8c",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"var user = pm.response.json();",
							"",
							"var expectedUserFields = ['name', 'email', 'token'];",
							"expectedUserFields.forEach(function(key) {",
							"    tests[`user should have ${key} field`] = (typeof(user[key]) !== 'undefined');",
							"});",
							"tests['should have correct email'] = user.email == 'basicuser@mail.com';",
							"",
							"wait(2000);",
							"",
							"function wait(ms){",
							"   var start = new Date().getTime();",
							"   var end = start;",
							"   while(end < start + ms) {",
							"     end = new Date().getTime();",
							"  }",
							"}",
							"",
							"pm.globals.unset('user_name');",
							"pm.globals.set('user_name', user.name);",
							"tests['global variable user_name should be set'] = pm.globals.get('user_name');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"user\": {\n    \"email\": \"basicuser@mail.com\",\n    \"password\": \"password\"\n  }\n}"
				},
				"url": {
					"raw": "{{apiUrl}}/users",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup Another User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d35bf944-eade-473b-92ac-3a0c7273678d",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"var user = pm.response.json();",
							"",
							"var expectedUserFields = ['name', 'email', 'token'];",
							"expectedUserFields.forEach(function(key) {",
							"    tests[`user should have ${key} field`] = (typeof(user[key]) !== 'undefined');",
							"});",
							"tests['should have correct email'] = user.email == 'celebuser@mail.com';",
							"",
							"pm.globals.unset('authToken2');",
							"pm.globals.set('authToken2', user.token);",
							"tests['global variable token should be set'] = pm.globals.get('authToken2');",
							"",
							"pm.globals.unset('user_name2');",
							"pm.globals.set('user_name2', user.name);",
							"tests['global variable user_name2 should be set'] = pm.globals.get('user_name2');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"user\": {\n    \"email\": \"celebuser@mail.com\",\n    \"password\": \"password\"\n  }\n}"
				},
				"url": {
					"raw": "{{apiUrl}}/users",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "90dbe92a-9891-4169-8944-c0a421973033",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"var user = pm.response.json();",
							"",
							"var expectedUserFields = ['name', 'email', 'token'];",
							"expectedUserFields.forEach(function(key) {",
							"    tests[`user should have ${key} field`] = (typeof(user[key]) !== 'undefined');",
							"});",
							"tests['should have correct email'] = user.email == 'basicuser@mail.com';",
							"",
							"pm.globals.unset('authToken');",
							"pm.globals.set('authToken', user.token);",
							"tests['global variable token should be set'] = pm.globals.get('authToken');",
							"",
							"pm.globals.unset('user_name');",
							"pm.globals.set('user_name', user.name);",
							"tests['global variable token should be set'] = pm.globals.get('user_name');",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"basicuser@mail.com\",\n    \"password\": \"password\"\n}"
				},
				"url": {
					"raw": "{{apiUrl}}/users/login",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7f7f473-dcf2-4bef-8ad9-c7b4e1bb001c",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"var user = pm.response.json();",
							"",
							"var expectedUserFields = ['name', 'email', 'token'];",
							"expectedUserFields.forEach(function(key) {",
							"    tests[`user should have ${key} field`] = (typeof(user[key]) !== 'undefined');",
							"});",
							"tests['should have correct email'] = user.email == 'basicuser@mail.com';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Token {{authToken}}"
					}
				],
				"url": {
					"raw": "{{apiUrl}}/{{user_name}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"{{user_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "780ba0fb-0984-4bc3-b4dc-e77a7ac0986f",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"var user = pm.response.json();",
							"",
							"var expectedUserFields = ['name', 'email', 'token'];",
							"expectedUserFields.forEach(function(key) {",
							"    tests[`user should have ${key} field`] = (typeof(user[key]) !== 'undefined');",
							"});",
							"tests['should have correct email'] = user.email == 'newemail@mail.com';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{authToken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"user\": {\n    \"email\": \"newemail@mail.com\"\n  },\n  \"mask\": {\n  \t\"paths\": [\"user.email\"]\n  }\n}"
				},
				"url": {
					"raw": "{{apiUrl}}/{{user_name}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"{{user_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a9338555-7047-478a-aa7d-66ff8210cc8f",
						"exec": [
							"tests['should have status 404'] = pm.response.code === 404;",
							"res = pm.response.json();",
							"console.log(res);",
							"tests['should have correct error message'] = res.errors.body.indexOf('404 Not found') > -1;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}/nopez",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"nopez"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create GroceryItem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0bf81f72-62c1-4a9e-9e93-18094e1d7275",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"pm.variables.get(\"variable_key\");",
							"pm.variables.get(\"variable_key\");",
							"res = pm.response.json();",
							"console.log(res);",
							"var groceryItem = res;",
							"tests['should have article field'] = typeof(groceryItem) === 'object';",
							"",
							"var expectedArticleFields = ['name', 'groceryItemName', 'expirationDate', 'description', 'purchaseDate', 'quantity', 'createTime', 'updateTime'];",
							"expectedArticleFields.forEach(function(key) {",
							"    tests[`article should have ${key} field`] = (typeof(groceryItem[key]) !== 'undefined');",
							"});",
							"tests['should have correct groceryItemName'] = groceryItem.groceryItemName === 'tamarind pulp';",
							"tests['should have correct quantity'] = groceryItem.quantity === 2;",
							"tests['should have correct description'] = groceryItem.description === 'sour and sweet food item';",
							"tests['should have correct purchaseDate'] = groceryItem.purchaseDate === 'jun 7, 2020';",
							"tests['should have correct expirationDate'] = groceryItem.expirationDate === 'Jun 20, 2020';",
							"//TODO: Add validation that groceryItem.name has proper user_id",
							"",
							"pm.globals.unset('groceryItemId');",
							"pm.globals.set('groceryItemId', groceryItem.name);",
							"tests['global variable articleSlug should be set'] = pm.globals.get('groceryItemId');",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Token {{authToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"parent\": \"{{user_name}}\",\n  \"groceryItem\": {\n  \t\"groceryItemName\": \"tamarind pulp\",\n\t\"expirationDate\": \"Jun 20, 2020\",\n\t\"purchaseDate\": \"jun 7, 2020\",\n\t\"quantity\":2,\n\t\"description\":\"sour and sweet food item\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiUrl}}/{{user_name}}/groceryitems",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"{{user_name}}",
						"groceryitems"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create another GroceryItem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "56cf54de-ce9c-479c-ad3b-c5a4035ac8aa",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"pm.variables.get(\"variable_key\");",
							"pm.variables.get(\"variable_key\");",
							"res = pm.response.json();",
							"console.log(res);",
							"var groceryItem = res;",
							"tests['should have article field'] = typeof(groceryItem) === 'object';",
							"",
							"var expectedArticleFields = ['name', 'groceryItemName', 'expirationDate', 'description', 'purchaseDate', 'quantity', 'createTime', 'updateTime'];",
							"expectedArticleFields.forEach(function(key) {",
							"    tests[`groceryItem should have ${key} field`] = (typeof(groceryItem[key]) !== 'undefined');",
							"});",
							"tests['should have correct groceryItemName'] = groceryItem.groceryItemName === 'toor daal';",
							"tests['should have correct quantity'] = groceryItem.quantity === 1;",
							"tests['should have correct description'] = groceryItem.description === 'kandipappu.';",
							"tests['should have correct purchaseDate'] = groceryItem.purchaseDate === 'jun 1, 2020';",
							"tests['should have correct expirationDate'] = groceryItem.expirationDate === 'Jan 20, 2021';",
							"//TODO: Add validation that groceryItem.name has proper user_id"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Token {{authToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"parent\": \"{{user_name}}\",\n  \"groceryItem\": {\n  \t\"groceryItemName\": \"toor daal\",\n\t\"expirationDate\": \"Jan 20, 2021\",\n\t\"purchaseDate\": \"jun 1, 2020\",\n\t\"quantity\":1,\n\t\"description\":\"kandipappu.\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiUrl}}/{{user_name}}/groceryitems",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"{{user_name}}",
						"groceryitems"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Grocery Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9fce8be3-59e1-4257-843d-da17fb494553",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"var groceryItem = pm.response.json();",
							"tests['should have article field'] = typeof(groceryItem) === 'object';",
							"",
							"var expectedArticleFields = ['name', 'groceryItemName', 'expirationDate', 'description', 'purchaseDate', 'quantity', 'createTime', 'updateTime'];",
							"expectedArticleFields.forEach(function(key) {",
							"    tests[`article should have ${key} field`] = (typeof(groceryItem[key]) !== 'undefined');",
							"});",
							"tests['should have correct groceryItemName'] = groceryItem.groceryItemName === 'tamarind pulp';",
							"tests['should have correct quantity'] = groceryItem.quantity === 2;",
							"tests['should have correct description'] = groceryItem.description === 'sour and sweet food item';",
							"tests['should have correct purchaseDate'] = groceryItem.purchaseDate === 'jun 7, 2020';",
							"tests['should have correct expirationDate'] = groceryItem.expirationDate === 'Jun 20, 2020';",
							"//TODO: Add validation that groceryItem.name has proper user_id",
							"",
							"pm.globals.unset('groceryItemId');",
							"pm.globals.set('groceryItemId', groceryItem.name);",
							"tests['global variable articleSlug should be set'] = pm.globals.get('groceryItemId');",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{authToken}}",
						"type": "text"
					},
					{
						"key": "Con",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{apiUrl}}/{{groceryItemId}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"{{groceryItemId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update GroceryItem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d1a20c80-0688-498a-9760-d0210b18203a",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"res = pm.response.json();",
							"console.log(res);",
							"var updatedGroceryItem = res;",
							"tests['type of response is object'] = typeof(updatedGroceryItem) === 'object';",
							"",
							"var expectedGroceryItemFields = ['name', 'purchaseDate', 'expirationDate', 'groceryItemName', 'description', 'createTime', 'updateTime', 'quantity'];",
							"expectedGroceryItemFields.forEach(function(key) {",
							"    tests[`groceryItem should have ${key} field`] = (typeof(updatedGroceryItem[key]) !== 'undefined');",
							"});",
							"tests['should have correct name'] = updatedGroceryItem.name === pm.globals.get('groceryItemId');",
							"tests['should have correct decription'] = updatedGroceryItem.description === 'sweetest..!!';",
							"tests['should have correct purchaseDate'] = updatedGroceryItem.purchaseDate === 'jun 7, 2020';",
							"tests['should have correct expirationDate'] = updatedGroceryItem.expirationDate === 'Jun 20, 2020';",
							"tests['should have correct groceryItemName'] = updatedGroceryItem.groceryItemName === 'tamarind pulp updated';",
							"tests['should have correct quantity'] = updatedGroceryItem.quantity === 8;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{authToken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"groceryItem\": {\n    \"quantity\": 8,\n    \"description\": \"sweetest..!!\",\n    \"groceryItemName\": \"tamarind pulp updated\"\n  },\n  \"mask\": {\n  \t\"paths\": [\"groceryItem.quantity\",\"groceryItem.description\",\"groceryItem.groceryItemName\"]\n  }\n}"
				},
				"url": {
					"raw": "{{apiUrl}}/{{groceryItemId}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"{{groceryItemId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All GroceryItems",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bc67583c-c96f-4799-b2b0-efc2bd24182c",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"var groceryItems = pm.response.json();",
							"console.log(groceryItems);",
							"",
							"console.log(typeof(groceryItems));",
							"",
							"tests['should have array of grocery items'] = Array.isArray(groceryItems);",
							"tests['should have 2 items'] = groceryItems.length === 2;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{authToken}}"
					}
				],
				"url": {
					"raw": "{{apiUrl}}/{{user_name}}/groceryitems",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"{{user_name}}",
						"groceryitems"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete GroceryItem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "51def13a-e396-4909-bd5a-d078eb6be8f7",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{authToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{apiUrl}}/{{groceryItemId}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"{{groceryItemId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0ed98966-bbf9-4073-b049-f6afcb71c71a",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"pm.globals.unset('authToken');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{authToken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{apiUrl}}/{{user_name}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"{{user_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete another User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8b1fa271-e453-41de-b856-ddcc3145f736",
						"exec": [
							"tests['should have status 200'] = pm.response.code === 200;",
							"pm.globals.unset('user_name2');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{authToken2}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{apiUrl}}/{{user_name2}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"{{user_name2}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}